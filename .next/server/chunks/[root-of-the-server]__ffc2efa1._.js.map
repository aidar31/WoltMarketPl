{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///home/aidar/src/WoltMarketPl/src/app/api/kyc/register/investor/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport jwt from 'jsonwebtoken'\r\n\r\n// Временное хранилище инвесторов (в реальном проекте используйте базу данных)\r\nconst investors: any[] = []\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const formData = await request.formData()\r\n    \r\n    // Извлекаем данные из формы\r\n    const userId = formData.get('userId') as string\r\n    const firstName = formData.get('firstName') as string\r\n    const lastName = formData.get('lastName') as string\r\n    const dateOfBirth = formData.get('dateOfBirth') as string\r\n    const phoneNumber = formData.get('phoneNumber') as string\r\n    const idDocumentType = formData.get('idDocumentType') as string\r\n    const idDocumentNumber = formData.get('idDocumentNumber') as string\r\n    const address = formData.get('address') as string\r\n    const taxNumber = formData.get('taxNumber') as string\r\n    const email = formData.get('email') as string\r\n    const password = formData.get('password') as string\r\n\r\n    // Получаем файлы\r\n    const idDocumentFront = formData.get('idDocumentFront') as File\r\n    const idDocumentBack = formData.get('idDocumentBack') as File\r\n    const selfieWithId = formData.get('selfieWithId') as File\r\n\r\n    // Валидация\r\n    if (!firstName || !lastName || !dateOfBirth || !phoneNumber || !idDocumentType || !idDocumentNumber || !address || !email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Проверяем, существует ли уже инвестор с таким email\r\n    const existingInvestor = investors.find(inv => inv.email === email)\r\n    if (existingInvestor) {\r\n      return NextResponse.json(\r\n        { error: 'Investor already registered' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Создаем инвестора\r\n    const investor = {\r\n      id: investors.length + 1,\r\n      userId: parseInt(userId) || investors.length + 1,\r\n      firstName,\r\n      lastName,\r\n      dateOfBirth,\r\n      phoneNumber,\r\n      idDocumentType,\r\n      idDocumentNumber,\r\n      address,\r\n      taxNumber,\r\n      email,\r\n      verificationStatus: 'pending',\r\n      createdAt: new Date().toISOString(),\r\n      documents: {\r\n        idDocumentFront: idDocumentFront ? await idDocumentFront.arrayBuffer() : null,\r\n        idDocumentBack: idDocumentBack ? await idDocumentBack.arrayBuffer() : null,\r\n        selfieWithId: selfieWithId ? await selfieWithId.arrayBuffer() : null\r\n      }\r\n    }\r\n\r\n    investors.push(investor)\r\n\r\n    // Создаем JWT токен\r\n    const token = jwt.sign(\r\n      { userId: investor.userId, email: investor.email, type: 'investor' },\r\n      process.env.JWT_SECRET || 'your-secret-key',\r\n      { expiresIn: '7d' }\r\n    )\r\n\r\n    return NextResponse.json({\r\n      message: 'Investor registered successfully',\r\n      investor: {\r\n        id: investor.id,\r\n        firstName: investor.firstName,\r\n        lastName: investor.lastName,\r\n        email: investor.email,\r\n        verificationStatus: investor.verificationStatus\r\n      },\r\n      token\r\n    })\r\n  } catch (error) {\r\n    console.error('Investor registration error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,8EAA8E;AAC9E,MAAM,YAAmB,EAAE;AAEpB,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QAEvC,4BAA4B;QAC5B,MAAM,SAAS,SAAS,GAAG,CAAC;QAC5B,MAAM,YAAY,SAAS,GAAG,CAAC;QAC/B,MAAM,WAAW,SAAS,GAAG,CAAC;QAC9B,MAAM,cAAc,SAAS,GAAG,CAAC;QACjC,MAAM,cAAc,SAAS,GAAG,CAAC;QACjC,MAAM,iBAAiB,SAAS,GAAG,CAAC;QACpC,MAAM,mBAAmB,SAAS,GAAG,CAAC;QACtC,MAAM,UAAU,SAAS,GAAG,CAAC;QAC7B,MAAM,YAAY,SAAS,GAAG,CAAC;QAC/B,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,WAAW,SAAS,GAAG,CAAC;QAE9B,iBAAiB;QACjB,MAAM,kBAAkB,SAAS,GAAG,CAAC;QACrC,MAAM,iBAAiB,SAAS,GAAG,CAAC;QACpC,MAAM,eAAe,SAAS,GAAG,CAAC;QAElC,YAAY;QACZ,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU;YACtI,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sDAAsD;QACtD,MAAM,mBAAmB,UAAU,IAAI,CAAC,CAAA,MAAO,IAAI,KAAK,KAAK;QAC7D,IAAI,kBAAkB;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,WAAW;YACf,IAAI,UAAU,MAAM,GAAG;YACvB,QAAQ,SAAS,WAAW,UAAU,MAAM,GAAG;YAC/C;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA,oBAAoB;YACpB,WAAW,IAAI,OAAO,WAAW;YACjC,WAAW;gBACT,iBAAiB,kBAAkB,MAAM,gBAAgB,WAAW,KAAK;gBACzE,gBAAgB,iBAAiB,MAAM,eAAe,WAAW,KAAK;gBACtE,cAAc,eAAe,MAAM,aAAa,WAAW,KAAK;YAClE;QACF;QAEA,UAAU,IAAI,CAAC;QAEf,oBAAoB;QACpB,MAAM,QAAQ,kJAAG,CAAC,IAAI,CACpB;YAAE,QAAQ,SAAS,MAAM;YAAE,OAAO,SAAS,KAAK;YAAE,MAAM;QAAW,GACnE,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAC1B;YAAE,WAAW;QAAK;QAGpB,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;gBACR,IAAI,SAAS,EAAE;gBACf,WAAW,SAAS,SAAS;gBAC7B,UAAU,SAAS,QAAQ;gBAC3B,OAAO,SAAS,KAAK;gBACrB,oBAAoB,SAAS,kBAAkB;YACjD;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}